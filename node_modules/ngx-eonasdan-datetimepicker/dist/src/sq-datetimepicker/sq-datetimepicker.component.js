import * as $ from 'jquery';
import * as moment from 'moment';
import 'eonasdan-bootstrap-datetimepicker';
import { Component, Input, forwardRef, ElementRef, Output, EventEmitter } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
export var SQ_DATETIMEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return SqDatetimepickerComponent; }),
    multi: true,
};
export var SQ_DATETIMEPICKER_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return SqDatetimepickerComponent; }),
    multi: true,
};
var SqDatetimepickerComponent = (function () {
    function SqDatetimepickerComponent(el) {
        this.el = el;
        this.mode = 'input-group';
        this.inputClass = 'form-control';
        this.groupClass = '';
        this.groupIconClass = 'glyphicon glyphicon-calendar';
        this.readOnly = false;
        this.dpChange = new EventEmitter();
        this.dpError = new EventEmitter();
        this.dpHide = new EventEmitter();
        this.dpUpdate = new EventEmitter();
        this.validModes = ['input-group', 'input', 'inline'];
        this.propagateChange = function (_) { };
    }
    SqDatetimepickerComponent.prototype.ngOnInit = function () {
        if (this.validModes.indexOf(this.mode) === -1) {
            var modes = this.validModes.map(function (m) { return "\"" + m + "\""; }).join(', ');
            throw this.mode + " is not valid mode, use one of following: " + modes;
        }
        this.initDatetimepicker();
    };
    SqDatetimepickerComponent.prototype.ngOnChanges = function (changes) {
        if (this.dpObject && changes && changes['options']) {
            this.dpObject.options(this.options);
        }
    };
    SqDatetimepickerComponent.prototype.ngOnDestroy = function () {
        this.dpObject.destroy();
    };
    SqDatetimepickerComponent.prototype.writeValue = function (obj) {
        if (typeof obj === 'string' || obj instanceof String) {
            obj = moment(obj);
        }
        this.dpObject.date(obj);
    };
    SqDatetimepickerComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    SqDatetimepickerComponent.prototype.validate = function (c) {
        return (!this.parseError) ? null : {
            dateParseError: {
                valid: false,
            },
        };
    };
    SqDatetimepickerComponent.prototype.registerOnTouched = function () { };
    SqDatetimepickerComponent.prototype.onChange = function (date) {
        this.propagateChange(date);
    };
    SqDatetimepickerComponent.prototype.initDatetimepicker = function () {
        for (var _i = 0, _a = this.validModes; _i < _a.length; _i++) {
            var m = _a[_i];
            if (m !== this.mode) {
                $(this.el.nativeElement.querySelector(".sq-datetimepicker-" + m)).remove();
            }
        }
        this.dpElement = $(this.el.nativeElement.querySelector(".sq-datetimepicker-" + this.mode));
        var options = Object.assign({}, this.options);
        options.inline = this.mode === 'inline';
        this.dpElement.datetimepicker(options);
        this.dpObject = this.dpElement.data('DateTimePicker');
        this.bindEvents();
    };
    SqDatetimepickerComponent.prototype.bindEvents = function () {
        var _this = this;
        this.dpElement.on('dp.hide', function (e) { _this.dpHide.emit(e); });
        this.dpElement.on('dp.change', function (e) {
            _this.parseError = false;
            _this.onChange(e.date || null);
            _this.dpChange.emit(e);
        });
        this.dpElement.on('dp.error', function (e) {
            _this.parseError = true;
            _this.onChange(null);
            _this.dpError.emit(e);
        });
        this.dpElement.on('dp.update', function (e) { _this.dpUpdate.emit(e); });
    };
    return SqDatetimepickerComponent;
}());
export { SqDatetimepickerComponent };
SqDatetimepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'sq-datetimepicker',
                template: "\n    <div [ngStyle]=\"style\">\n      <div class=\"sq-datetimepicker-input-group input-group date\" [ngClass]=\"groupClass\">\n        <input type=\"text\" [ngClass]=\"inputClass\" [readOnly]=\"readOnly\" />\n        <span class=\"input-group-addon\">\n          <span [ngClass]=\"groupIconClass\"></span>\n        </span>\n      </div>\n      <input type=\"text\" class=\"sq-datetimepicker-input\" [ngClass]=\"inputClass\" [readOnly]=\"readOnly\"/>\n      <div class=\"sq-datetimepicker-inline\"></div>\n    </div>",
                providers: [SQ_DATETIMEPICKER_VALUE_ACCESSOR, SQ_DATETIMEPICKER_VALIDATOR]
            },] },
];
SqDatetimepickerComponent.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
SqDatetimepickerComponent.propDecorators = {
    'options': [{ type: Input },],
    'mode': [{ type: Input },],
    'style': [{ type: Input },],
    'inputClass': [{ type: Input },],
    'groupClass': [{ type: Input },],
    'groupIconClass': [{ type: Input },],
    'readOnly': [{ type: Input },],
    'dpChange': [{ type: Output },],
    'dpError': [{ type: Output },],
    'dpHide': [{ type: Output },],
    'dpUpdate': [{ type: Output },],
};
//# sourceMappingURL=sq-datetimepicker.component.js.map